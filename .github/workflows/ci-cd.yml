name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and run tests
      run: |
        docker-compose up -d
        docker-compose exec -T app sh -c "pip install --no-cache-dir -r requirements.txt && pytest"
        docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test  # This ensures that the deploy job runs only if build-and-test is successful

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main'
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} << EOF
          cd /home/ec2-user/fastapi-template
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env
          git pull
          docker-compose up -d --build
        EOF
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
